// File generated by SBML-to-PRISM converter
// Original file: yeastPolarization\yeastPolarization.xml
// @GeneticLogicLab

ctmc

// const int MAX_AMOUNT = ADD VALUE 

// Compartment size
const double Cell = 1.0;

// Model parameters

// Species S0
// const int S0_MAX = MAX_AMOUNT;
module S0

  // S0 : [0..S0_MAX] init 50;
  S0  :  int init 50;

		// R0
		[R0] S0 >= 0 -> (S0'=S0+1);
		// R1
		[R1] S0 > 0 -> (S0'=S0-1);
		// R2
		[R2] S0 > 0 -> (S0'=S0-1);
		// R3
		[R3] S0 >= 0 -> (S0'=S0+1);

endmodule

// Species S1
// const int S1_MAX = MAX_AMOUNT;
module S1

  // S1 : [0..S1_MAX] init 2;
  S1  :  int init 2;

		// R2
		[R2] S1 > 0 -> (S1'=S1-1);

endmodule

// Species S2
// const int S2_MAX = MAX_AMOUNT;
module S2

  // S2 : [0..S2_MAX] init 0;
  S2  :  int init 0;

		// R2
		[R2] S2 >= 0 -> (S2'=S2+1);
		// R3
		[R3] S2 > 0 -> (S2'=S2-1);
		// R4
		[R4] S2 > 0 -> (S2'=S2-1);
		// R7
		[R7] S2 >= 0 -> (S2'=S2+1);

endmodule

// Species S3
// const int S3_MAX = MAX_AMOUNT;
module S3

  // S3 : [0..S3_MAX] init 50;
  S3  :  int init 50;

		// R4
		[R4] S3 > 0 -> (S3'=S3-1);
		// R6
		[R6] S3 >= 0 -> (S3'=S3+1);

endmodule

// Species S4
// const int S4_MAX = MAX_AMOUNT;
module S4

  // S4 : [0..S4_MAX] init 0;
  S4  :  int init 0;

		// R4
		[R4] S4 >= 0 -> (S4'=S4+1);
		// R5
		[R5] S4 > 0 -> (S4'=S4-1);

endmodule

// Species S5
// const int S5_MAX = MAX_AMOUNT;
module S5

  // S5 : [0..S5_MAX] init 0;
  S5  :  int init 0;

		// R4
		[R4] S5 >= 0 -> (S5'=S5+1);
		// R6
		[R6] S5 > 0 -> (S5'=S5-1);

endmodule

// Species S6
// const int S6_MAX = MAX_AMOUNT;
module S6

  // S6 : [0..S6_MAX] init 0;
  S6  :  int init 0;

		// R5
		[R5] S6 >= 0 -> (S6'=S6+1);
		// R6
		[R6] S6 > 0 -> (S6'=S6-1);

endmodule

// Reaction rates
module reaction_rates

		// R0:  ->  S0 
		[R0]  kf > 0 -> (kf) : true;

		// R1:  ->  
		[R1]  (kf * S0) > 0 -> ((kf * S0)) : true;

		// R2:  ->  S1 S2 
		[R2]  ((kf * S0) * S1) > 0 -> (((kf * S0) * S1)) : true;

		// R3:  ->  S0 
		[R3]  (kf * S2) > 0 -> ((kf * S2)) : true;

		// R4:  ->  S4 S5 
		[R4]  ((kf * S2) * S3) > 0 -> (((kf * S2) * S3)) : true;

		// R5:  ->  S6 
		[R5]  (kf * S4) > 0 -> ((kf * S4)) : true;

		// R6:  ->  S3 
		[R6]  ((kf * S5) * S6) > 0 -> (((kf * S5) * S6)) : true;

		// R7:  ->  S2 
		[R7]  kf > 0 -> (kf) : true;

endmodule

// Reward structures (one per species)
// Reward 1: S0
rewards "S0" true : S0; endrewards
// Reward 2: S1
rewards "S1" true : S1; endrewards
// Reward 3: S2
rewards "S2" true : S2; endrewards
// Reward 4: S3
rewards "S3" true : S3; endrewards
// Reward 5: S4
rewards "S4" true : S4; endrewards
// Reward 6: S5
rewards "S5" true : S5; endrewards
// Reward 7: S6
rewards "S6" true : S6; endrewards
