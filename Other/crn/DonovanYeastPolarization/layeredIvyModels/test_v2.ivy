#lang ivy 1.7

object updater = {
    type num
    interpret num -> bv[10]
    type exec_var
    interpret exec_var -> bv[8]
    type exec_stage
    interpret exec_stage -> bv[3]
    
    action incr(x:num) returns(y:num) = {
        y := x + 1
    }
    
    action decr(x:num) returns(y:num) = {
        y := x - 1
    }
}


object goal = {
    action achieved(v:updater.num)
    object spec = {
        before achieved {
            assert v >=  50;
            protocol.idle := 1
        }
    }
}

object enabled_checker = {

	action is_enabled_r3(reactant1:updater.num,reactant2:updater.num) returns(y:bool) = {
        if reactant1 >= 1 & reactant2 >= 1 {
            y := true
        }
        else {
            y := false
        }
    }
                    
    action is_enabled_r5(reactant1:updater.num,reactant2:updater.num) returns(y:bool) = {
        if reactant1 >= 1 & reactant2 >= 1 {
            y := true
        }
        else {
            y := false
        }
    }
                    
    action is_enabled_r8 returns(y:bool) = {
        y := true
    }
                
    
}

object inspector = {
	action check_guard_r3(reactant1:updater.num,reactant2:updater.num)
    before check_guard_r3 {
        assert reactant1 >= 1 & reactant2 >= 1
    }
    
    action check_guard_r5(reactant1:updater.num,reactant2:updater.num)
    before check_guard_r5 {
        assert reactant1 >= 1 & reactant2 >= 1
    }
    
    action check_guard_r8
    before check_guard_r8 {
        assert true
    }
    
    
}

object selector = {
	individual r3_exec : updater.exec_var
	individual r5_exec : updater.exec_var
	individual r8_exec : updater.exec_var
	
	individual r3_rate : updater.exec_var
	individual r5_rate : updater.exec_var
	individual r8_rate : updater.exec_var
	
	individual r3_count : updater.exec_var
	individual r5_count : updater.exec_var
	individual r8_count : updater.exec_var
	
	individual r3_count_rate : updater.exec_var
	individual r5_count_rate : updater.exec_var
	individual r8_count_rate : updater.exec_var
	
	individual r3_stage : updater.exec_stage
	individual r5_stage : updater.exec_stage
	individual r8_stage : updater.exec_stage
	

	after init {
		r3_count := 0;
		r5_count := 0;
		r8_count := 0;
		

		r3_count_rate := 4;
		r5_count_rate := 4;
		r8_count_rate := 4;
		
	}

	action execute_r3 returns(y:bool) = {
        r3_exec := r3_exec + 1;
        if r3_exec >= r3_rate {
            y := true;
            r3_exec := 0;
            r3_count := r3_count + 1
        }
        else {
            y := false
        };
        if r3_count >= r3_count_rate {
            r3_stage := r3_stage + 1;
            r3_count := 0
        };
        if r3_stage = 0 {
            r3_count_rate := 4;
            r3_rate := 3
        }
        else if r3_stage = 1 {
            r3_count_rate := 3;
            r3_rate := 4
        }
        else if r3_stage = 2 {
            r3_count_rate := 5;
            r3_rate := 2
        }
        else if r3_stage = 3 {
            r3_count_rate := 4;
            r3_rate := 3
        }
        else if r3_stage = 4 {
            r3_count_rate := 4;
            r3_rate := 2
        }
        else if r3_stage = 5 {
            r3_count_rate := 5;
            r3_rate := 4
        }
        else if r3_stage = 6 {
            r3_count_rate := 3;
            r3_rate := 3
        }
        else if r3_stage = 7 {
            r3_count_rate := 4;
            r3_rate := 2
        }
        else {
            r3_stage := 0
        }
    }

    action execute_r5 returns(y:bool) = {
        r5_exec := r5_exec + 1;
        if r5_exec >= r5_rate {
            y := true;
            r5_exec := 0;
            r5_count := r5_count + 1
        }
        else {
            y := false
        };
        if r5_count >= r5_count_rate {
            r5_stage := r5_stage + 1;
            r5_count := 0
        };
        if r5_stage = 0 {
            r5_count_rate := 4;
            r5_rate := 1
        }
        else if r5_stage = 1 {
            r5_count_rate := 3;
            r5_rate := 1
        }
        else if r5_stage = 2 {
            r5_count_rate := 5;
            r5_rate := 1
        }
        else if r5_stage = 3 {
            r5_count_rate := 4;
            r5_rate := 1
        }
        else if r5_stage = 4 {
            r5_count_rate := 4;
            r5_rate := 1
        }
        else if r5_stage = 5 {
            r5_count_rate := 5;
            r5_rate := 1
        }
        else if r5_stage = 6 {
            r5_count_rate := 3;
            r5_rate := 1
        }
        else if r5_stage = 7 {
            r5_count_rate := 4;
            r5_rate := 1
        }
        else {
            r5_stage := 0
        }
    }

    action execute_r8 returns(y:bool) = {
        r8_exec := r8_exec + 1;
        if r8_exec >= r8_rate {
            y := true;
            r8_exec := 0;
            r8_count := r8_count + 1
        }
        else {
            y := false
        };
        if r8_count >= r8_count_rate {
            r8_stage := r8_stage + 1;
            r8_count := 0
        };
        if r8_stage = 0 {
            r8_count_rate := 4;
            r8_rate := 3
        }
        else if r8_stage = 1 {
            r8_count_rate := 3;
            r8_rate := 4
        }
        else if r8_stage = 2 {
            r8_count_rate := 5;
            r8_rate := 2
        }
        else if r8_stage = 3 {
            r8_count_rate := 4;
            r8_rate := 3
        }
        else if r8_stage = 4 {
            r8_count_rate := 4;
            r8_rate := 2
        }
        else if r8_stage = 5 {
            r8_count_rate := 5;
            r8_rate := 4
        }
        else if r8_stage = 6 {
            r8_count_rate := 3;
            r8_rate := 3
        }
        else if r8_stage = 7 {
            r8_count_rate := 4;
            r8_rate := 2
        }
        else {
            r8_stage := 0
        }
    }

    
}

object protocol = {

	type 2bit
	interpret 2bit -> bv[1]
	individual idle : 2bit

	individual r_r : updater.num
	individual r_l : updater.num
	individual r_rl : updater.num
	individual r_g : updater.num
	individual r_ga : updater.num
	individual r_gbg : updater.num
	individual r_gd : updater.num

	after init {
		r_r := 50;
		r_l := 2;
		r_rl := 0;
		r_g := 50;
		r_ga := 0;
		r_gbg := 0;
		r_gd := 0;
		idle := 0
	}

	action update_r3 =  {
        if selector.execute_r3 {
            call inspector.check_guard_r3(r_r,r_l);
			r_r := updater.decr(r_r);
			r_l := updater.decr(r_l);
			r_rl := updater.incr(r_rl);
			r_l := updater.incr(r_l)
		}
	}

	action update_r5 =  {
        if selector.execute_r5 {
            call inspector.check_guard_r5(r_rl,r_g);
			r_rl := updater.decr(r_rl);
			r_g := updater.decr(r_g);
			r_ga := updater.incr(r_ga);
			r_gbg := updater.incr(r_gbg);
			if r_gbg >=  50 {
				call goal.achieved(r_gbg)
			}
		}
	}

	action update_r8 =  {
        if selector.execute_r8 {
            call inspector.check_guard_r8;
			r_rl := updater.incr(r_rl)
		}
	}

	

	action idling = {}

	

	action fail_test = {}

	before update_r3 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r3(r_r,r_l)
	}

	before update_r5 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r5(r_rl,r_g)
	}

	before update_r8 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r8
	}
	

	before idling {
		assert idle = 1
	}


	after idling {
		assert idle = 0
	}



	before fail_test {
		assert idle = 0;
		assert (enabled_checker.is_enabled_r3(r_r,r_l) = false & enabled_checker.is_enabled_r5(r_rl,r_g) = false & enabled_checker.is_enabled_r8 = false)
	}

	after fail_test {
		assert false
	}

}

export protocol.fail_test
export protocol.update_r3
export protocol.update_r5
export protocol.update_r8
export protocol.idling
import goal.achieved
import inspector.check_guard_r3
import inspector.check_guard_r5
import inspector.check_guard_r8

isolate iso_proto = protocol with enabled_checker, updater, goal, selector, inspector