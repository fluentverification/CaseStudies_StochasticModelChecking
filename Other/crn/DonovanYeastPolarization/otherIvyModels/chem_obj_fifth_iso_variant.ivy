#lang ivy1.7

#attribute method = mc

#type num
#interpret num -> bv[10] #lowering this lowers execution time


object chem = {
        type num

        interpret num -> bv[10]

        action incr(x:num) returns(y:num) = {
                y := x + 1
        }

        action decr(x:num) returns(y:num) = {
                y := x - 1
        }
}


object intf = {
	action r8(rl_1:chem.num)
	action r7(gbg_1:chem.num, gd_1:chem.num, g_1:chem.num)
	action r6(ga_1:chem.num, gd_1:chem.num)
	action r4(rl_1:chem.num, r_1:chem.num)
	action r3(r:chem.num, l_1:chem.num, rl_1:chem.num)
	action r5(rl_1:chem.num, g_1:chem.num, ga_1:chem.num, gbg_1:chem.num) 
}

object spec = {
	individual r   : chem.num
	individual l   : chem.num
	individual rl  : chem.num
	individual g   : chem.num
	individual ga  : chem.num
	individual gbg : chem.num
	individual gd  : chem.num

	after init {
		r := 50;
		l := 2;
		rl := 0;
		g := 50;
		ga := 0;
		gbg := 0;
		gd := 0		
	}
	before intf.r8(rl_1:chem.num) {
		#assert false;
		assert rl_1 = rl;
		assert true;
		rl := chem.incr(rl)		
	}
	before intf.r7(gbg_1:chem.num, gd_1:chem.num, g_1:chem.num) {
		#assert false;
		#assert gbg_1 = gbg & gd_1 = gd & g_1 = g;
		assert gd >= 1 & gbg >= 1;
		g := chem.incr(g);
		gd := chem.decr(gd);
		gbg := chem.decr(gbg)
	}
	before intf.r6(ga_1:chem.num, gd_1:chem.num) {
		#assert false;
		#assert ga_1 = ga & gd_1 = gd;
		assert ga >= 1;
		ga := chem.decr(ga);
		gd := chem.incr(gd)
	}
	before intf.r4(rl_1:chem.num, r_1:chem.num) {
		#assert false;
		assert rl_1 = rl & r_1 = r;
		assert rl >= 1;
		rl := chem.decr(rl);
		r := chem.incr(r)
	}
	before intf.r3(r_1:chem.num, l_1:chem.num, rl_1:chem.num) {
		#assert false;
		assert rl_1 = rl & l_1 = l & r_1 = r;
		assert l >= 1 & r >= 1;
		r := chem.decr(r);
		l := chem.decr(l);
		rl := chem.incr(rl);
		l := chem.incr(l)
	}
	before intf.r5(rl_1:chem.num, g_1:chem.num, ga_1:chem.num, gbg_1:chem.num) {
		#assert false;
		assert rl_1 = rl & g_1 = g & ga_1 = ga & gbg_1 = gbg;
		assert rl >= 1 & g >= 1;
		rl := chem.decr(rl);
		g := chem.decr(g);
		ga := chem.incr(ga);
		gbg := chem.incr(gbg)
	}
	
}

object other_reactions = {
	
	individual local_r   : chem.num
	individual local_l   : chem.num
	individual local_rl  : chem.num
	individual local_g   : chem.num
	individual local_ga  : chem.num
	individual local_gbg : chem.num
	individual local_gd  : chem.num

	
	after init {
		local_r := 50;
		local_l := 2;
		local_rl := 0;
		local_g := 50;
		local_ga := 0;
		local_gbg := 0;
		local_gd := 0
	}

	action r1_local = {
	  	local_r := chem.incr(local_r)
	}
	
	action r2_local = {
		if local_r >= 1 {
			local_r := chem.decr(local_r)
		}
	}

	action r3_local = {
		if local_l >= 1 & local_r >= 1 {
			call intf.r3(local_r, local_l, local_rl);
			local_r := chem.decr(local_r);
			local_l := chem.decr(local_l);
			local_rl := chem.incr(local_rl);
			local_l := chem.incr(local_l)
		}

	}
	action r4_local = {
		if local_rl >= 1 {
			call intf.r4(local_rl, local_r);
			local_rl := chem.decr(local_rl);
			local_r := chem.incr(local_r)
		}
	
	}
	action r6_local = {
		if local_ga >= 1 {
			call intf.r6(local_ga, local_gd);
			local_ga := chem.decr(local_ga);
			local_gd := chem.incr(local_gd)
		}

	}
	action r7_local = {
		if local_gd >= 1 & local_gbg >= 1 {
			call intf.r7(local_gbg,local_gd,local_g);
			local_gd := chem.decr(local_gd);
			local_gbg := chem.decr(local_gbg);
			local_g := chem.incr(local_g)
		}
	}
	action r8_local = {
		call intf.r8(local_rl);
		local_rl := chem.incr(local_rl)
	}
	implement intf.r5(rl_1:chem.num, g_1:chem.num, ga_1:chem.num, gbg_1:chem.num) {
		local_rl := chem.decr(local_rl);
		local_g := chem.decr(local_g);
		local_ga := chem.incr(local_ga);
		local_gbg := chem.incr(local_gbg)
	}	
}

object fifth_reaction = {
   		
	individual local_rl  : chem.num
	individual local_g   : chem.num
	individual local_ga  : chem.num
	individual local_gbg : chem.num

	after init {
		local_rl := 0;
		local_g := 50;
		local_ga := 0;
		local_gbg := 0
	}
	
	action r5_local = {
		if local_rl >= 1 & local_g >= 1 {
		  call intf.r5(spec.rl, spec.g, spec.ga, spec.gbg);	
		  local_rl := chem.decr(local_rl);
		  local_g := chem.decr(local_g);
		  local_ga := chem.incr(local_ga);
		  local_gbg := chem.incr(local_gbg)
		}
	}
	implement intf.r8 {
		local_rl := chem.incr(local_rl)
	}
	
	implement intf.r7 {
		local_gbg := chem.decr(local_gbg);
		local_g := chem.incr(local_g)
	}
	implement intf.r6 {
		local_ga := chem.decr(local_ga)
	}
	implement intf.r4 {
		local_rl := chem.decr(local_rl)
	}
	implement intf.r3 {
		local_rl := chem.incr(local_rl)
	}
}


export fifth_reaction.r5_local
export other_reactions.r1_local
export other_reactions.r2_local
export other_reactions.r3_local
export other_reactions.r4_local
export other_reactions.r6_local
export other_reactions.r7_local
export other_reactions.r8_local

isolate iso_fifth = fifth_reaction with spec, chem
isolate iso_other = other_reactions with spec, chem
#isolate iso_spec = spec with fifth_reaction, other_reactions
#invariant (gbg ~= 50)
