// File generated by automatic SBML-to-PRISM conversion
// Original SBML file: repressilator.xml

ctmc

const int MAX_AMOUNT = 100;

// Compartment size
const double Cell = 1.0;

// Model parameters
const double kd = 0.0075; // kd
const double kr_f = 0.5; // kr_f
const double kr_r = 1; // kr_r
const double ka_f = 0.0033; // ka_f
const double ka_r = 1; // ka_r
const double ko_f = 0.033; // ko_f
const double ko_r = 1; // ko_r
const double kao_f = 1; // kao_f
const double kao_r = 1; // kao_r
const double nc = 2; // nc
const double nr = 30; // nr
const double ko = 0.05; // ko
const double kb = 0.0001; // kb
const double ng = 2; // ng
const double np = 10; // np
const double ka = 0.25; // ka

// Species CI
const int CI_MAX = MAX_AMOUNT;
module CI
	
	CI : [0..CI_MAX] init 0; // Initial amount 0
	
	// Degradation_CI
	[Degradation_CI] CI > 0 -> (CI'=CI-1);
	// Production_P2
	[Production_P2]  CI <= CI_MAX-10 -> (CI'=CI+10);
	
endmodule

// Species LacI
const int LacI_MAX = MAX_AMOUNT;
module LacI
	
	LacI : [0..LacI_MAX] init 0; // Initial amount 0
	
	// Degradation_LacI
	[Degradation_LacI] LacI > 0 -> (LacI'=LacI-1);
	// Production_P0
	[Production_P0]  LacI <= LacI_MAX-10 -> (LacI'=LacI+10);
	
endmodule

// Species TetR
const int TetR_MAX = MAX_AMOUNT;
module TetR
	
	TetR : [0..TetR_MAX] init 0; // Initial amount 0
	
	// Degradation_TetR
	[Degradation_TetR] TetR > 0 -> (TetR'=TetR-1);
	// Production_P1
	[Production_P1]  TetR <= TetR_MAX-10 -> (TetR'=TetR+10);
	
endmodule

// Species P0
const int P0_MAX = MAX_AMOUNT;
module P0
	
	P0 : [0..P0_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P1
const int P1_MAX = MAX_AMOUNT;
module P1
	
	P1 : [0..P1_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P2
const int P2_MAX = MAX_AMOUNT;
module P2
	
	P2 : [0..P2_MAX] init 2; // Initial amount 2
	
	
endmodule

// Reaction rates
module reaction_rates

	// Degradation_CI: CI -> 
	[Degradation_CI] (kd*CI) > 0 -> (kd*CI) : true;
	// Degradation_LacI: LacI -> 
	[Degradation_LacI] (kd*LacI) > 0 -> (kd*LacI) : true;
	// Degradation_TetR: TetR -> 
	[Degradation_TetR] (kd*TetR) > 0 -> (kd*TetR) : true;
	// Production_P0:  -> LacI
	[Production_P0] ((P0*ko*(ko_f/ko_r)*nr)/(1+((ko_f/ko_r)*nr)+(func(pow,((kr_f/kr_r)*CI),nc)))) > 0 -> ((P0*ko*(ko_f/ko_r)*nr)/(1+((ko_f/ko_r)*nr)+(func(pow,((kr_f/kr_r)*CI),nc)))) : true;
	// Production_P1:  -> TetR
	[Production_P1] ((P1*ko*(ko_f/ko_r)*nr)/(1+((ko_f/ko_r)*nr)+(func(pow,((kr_f/kr_r)*LacI),nc)))) > 0 -> ((P1*ko*(ko_f/ko_r)*nr)/(1+((ko_f/ko_r)*nr)+(func(pow,((kr_f/kr_r)*LacI),nc)))) : true;
	// Production_P2:  -> CI
	[Production_P2] ((P2*ko*(ko_f/ko_r)*nr)/(1+((ko_f/ko_r)*nr)+(func(pow,((kr_f/kr_r)*TetR),nc)))) > 0 -> ((P2*ko*(ko_f/ko_r)*nr)/(1+((ko_f/ko_r)*nr)+(func(pow,((kr_f/kr_r)*TetR),nc)))) : true;

endmodule

// Reward structures (one per species)

// Reward 1: CI
rewards "CI" true : CI; endrewards
// Reward 2: LacI
rewards "LacI" true : LacI; endrewards
// Reward 3: TetR
rewards "TetR" true : TetR; endrewards
// Reward 4: P0
rewards "P0" true : P0; endrewards
// Reward 5: P1
rewards "P1" true : P1; endrewards
// Reward 6: P2
rewards "P2" true : P2; endrewards
