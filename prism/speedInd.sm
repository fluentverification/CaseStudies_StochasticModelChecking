// File generated by automatic SBML-to-PRISM conversion
// Original SBML file: speedInd.xml

ctmc

const int MAX_AMOUNT = 200;

// Compartment size
const double default = 1.0;

// Model parameters
const double kr_f = 0.5; // kr_f
const double kr_r = 1; // kr_r
const double ka_f = 0.0033; // ka_f
const double ka_r = 1; // ka_r
const double kc_f = 0.05; // kc_f
const double kc_r = 1; // kc_r
const double ko_f = 0.033; // ko_f
const double ko_r = 1; // ko_r
const double kao_f = 1; // kao_f
const double kao_r = 1; // kao_r
const double kmdiff_f = 1; // kmdiff_f
const double kmdiff_r = 0.01; // kmdiff_r
const double kd = 0.0075; // kd
const double kecd = 0.005; // kecd
const double nc = 2; // nc
const double nr = 30; // nr
const double ko = 0.05; // ko
const double kb = 0.0001; // kb
const double ng = 2; // ng
const double np = 10; // np
const double ka = 0.25; // ka
const double kecdiff = 1; // kecdiff

// Species AA
const int AA_MAX = MAX_AMOUNT;
module AA
	
	AA : [0..AA_MAX] init 0; // Initial amount 0
	
	
endmodule

// Species B
const int B_MAX = MAX_AMOUNT;
module B
	
	B : [0..B_MAX] init 120; // Initial amount 120
	
	
endmodule

// Species CC
const int CC_MAX = MAX_AMOUNT;
module CC
	
	CC : [0..CC_MAX] init 120; // Initial amount 120
	
	// Degradation_CC
	[Degradation_CC] CC > 0 -> (CC'=CC-1);
	// Production_P9
	[Production_P9]  CC <= CC_MAX-10 -> (CC'=CC+10);
	
endmodule

// Species S1
const int S1_MAX = MAX_AMOUNT;
module S1
	
	S1 : [0..S1_MAX] init 200; // Initial amount 200
	
	// Degradation_S1
	[Degradation_S1] S1 > 0 -> (S1'=S1-1);
	// Production_P4
	[Production_P4]  S1 <= S1_MAX-10 -> (S1'=S1+10);
	// Production_P7
	[Production_P7]  S1 <= S1_MAX-10 -> (S1'=S1+10);
	
endmodule

// Species S2
const int S2_MAX = MAX_AMOUNT;
module S2
	
	S2 : [0..S2_MAX] init 0; // Initial amount 0
	
	// Degradation_S2
	[Degradation_S2] S2 > 0 -> (S2'=S2-1);
	// Production_P8
	[Production_P8]  S2 <= S2_MAX-10 -> (S2'=S2+10);
	// Production_P5
	[Production_P5]  S2 <= S2_MAX-10 -> (S2'=S2+10);
	
endmodule

// Species S3
const int S3_MAX = MAX_AMOUNT;
module S3
	
	S3 : [0..S3_MAX] init 120; // Initial amount 120
	
	// Degradation_S3
	[Degradation_S3] S3 > 0 -> (S3'=S3-1);
	// Production_P6
	[Production_P6]  S3 <= S3_MAX-10 -> (S3'=S3+10);
	// Production_P3
	[Production_P3]  S3 <= S3_MAX-10 -> (S3'=S3+10);
	
endmodule

// Species S4
const int S4_MAX = MAX_AMOUNT;
module S4
	
	S4 : [0..S4_MAX] init 0; // Initial amount 0
	
	// Degradation_S4
	[Degradation_S4] S4 > 0 -> (S4'=S4-1);
	// Production_P1
	[Production_P1]  S4 <= S4_MAX-10 -> (S4'=S4+10);
	// Production_P2
	[Production_P2]  S4 <= S4_MAX-10 -> (S4'=S4+10);
	// Production_P10
	[Production_P10]  S4 <= S4_MAX-10 -> (S4'=S4+10);
	
endmodule

// Species XX
const int XX_MAX = MAX_AMOUNT;
module XX
	
	XX : [0..XX_MAX] init 0; // Initial amount 0
	
	// Degradation_XX
	[Degradation_XX] XX > 0 -> (XX'=XX-1);
	// Production_P1
	[Production_P1]  XX <= XX_MAX-10 -> (XX'=XX+10);
	
endmodule

// Species Y
const int Y_MAX = MAX_AMOUNT;
module Y
	
	Y : [0..Y_MAX] init 0; // Initial amount 0
	
	// Degradation_Y
	[Degradation_Y] Y > 0 -> (Y'=Y-1);
	// Production_P2
	[Production_P2]  Y <= Y_MAX-10 -> (Y'=Y+10);
	
endmodule

// Species Z
const int Z_MAX = MAX_AMOUNT;
module Z
	
	Z : [0..Z_MAX] init 0; // Initial amount 0
	
	// Degradation_Z
	[Degradation_Z] Z > 0 -> (Z'=Z-1);
	// Production_P8
	[Production_P8]  Z <= Z_MAX-10 -> (Z'=Z+10);
	// Production_P3
	[Production_P3]  Z <= Z_MAX-10 -> (Z'=Z+10);
	
endmodule

// Species P9
const int P9_MAX = MAX_AMOUNT;
module P9
	
	P9 : [0..P9_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P8
const int P8_MAX = MAX_AMOUNT;
module P8
	
	P8 : [0..P8_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P5
const int P5_MAX = MAX_AMOUNT;
module P5
	
	P5 : [0..P5_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P4
const int P4_MAX = MAX_AMOUNT;
module P4
	
	P4 : [0..P4_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P7
const int P7_MAX = MAX_AMOUNT;
module P7
	
	P7 : [0..P7_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P6
const int P6_MAX = MAX_AMOUNT;
module P6
	
	P6 : [0..P6_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P1
const int P1_MAX = MAX_AMOUNT;
module P1
	
	P1 : [0..P1_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P3
const int P3_MAX = MAX_AMOUNT;
module P3
	
	P3 : [0..P3_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P2
const int P2_MAX = MAX_AMOUNT;
module P2
	
	P2 : [0..P2_MAX] init 2; // Initial amount 2
	
	
endmodule

// Species P10
const int P10_MAX = MAX_AMOUNT;
module P10
	
	P10 : [0..P10_MAX] init 2; // Initial amount 2
	
	
endmodule

// Reaction rates
module reaction_rates

	// Degradation_S3: S3 -> 
	[Degradation_S3] (kd*S3) > 0 -> (kd*S3) : true;
	// Degradation_S4: S4 -> 
	[Degradation_S4] (kd*S4) > 0 -> (kd*S4) : true;
	// Degradation_CC: CC -> 
	[Degradation_CC] (kd*CC) > 0 -> (kd*CC) : true;
	// Degradation_S2: S2 -> 
	[Degradation_S2] (kd*S2) > 0 -> (kd*S2) : true;
	// Degradation_S1: S1 -> 
	[Degradation_S1] (kd*S1) > 0 -> (kd*S1) : true;
	// Degradation_Y: Y -> 
	[Degradation_Y] (kd*Y) > 0 -> (kd*Y) : true;
	// Degradation_XX: XX -> 
	[Degradation_XX] (kd*XX) > 0 -> (kd*XX) : true;
	// Degradation_Z: Z -> 
	[Degradation_Z] (kd*Z) > 0 -> (kd*Z) : true;
	// Production_P9:  -> CC
	[Production_P9] (((((P9*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Z),nc)))) > 0 -> (((((P9*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Z),nc)))) : true;
	// Production_P8:  -> Z+S2
	[Production_P8] (((((P8*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S3),nc)))) > 0 -> (((((P8*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S3),nc)))) : true;
	// Production_P5:  -> S2
	[Production_P5] (((((P5*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S1),nc)))) > 0 -> (((((P5*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S1),nc)))) : true;
	// Production_P4:  -> S1
	[Production_P4] (((((P4*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*XX),nc)))) > 0 -> (((((P4*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*XX),nc)))) : true;
	// Production_P7:  -> S1
	[Production_P7] (((((P7*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Y),nc)))) > 0 -> (((((P7*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Y),nc)))) : true;
	// Production_P6:  -> S3
	[Production_P6] (((((P6*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S2),nc)))) > 0 -> (((((P6*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S2),nc)))) : true;
	// Production_P1:  -> S4+XX
	[Production_P1] (((((P1*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*AA),nc)))) > 0 -> (((((P1*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*AA),nc)))) : true;
	// Production_P3:  -> S3+Z
	[Production_P3] (((((P3*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S4),nc)))) > 0 -> (((((P3*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S4),nc)))) : true;
	// Production_P2:  -> S4+Y
	[Production_P2] (((((P2*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*B),nc)))) > 0 -> (((((P2*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*B),nc)))) : true;
	// Production_P10:  -> S4
	[Production_P10] (((((P10*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S2),nc)))) > 0 -> (((((P10*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*S2),nc)))) : true;

endmodule

// Reward structures (one per species)

// Reward 1: AA
rewards "AA" true : AA; endrewards
// Reward 2: B
rewards "B" true : B; endrewards
// Reward 3: CC
rewards "CC" true : CC; endrewards
// Reward 4: S1
rewards "S1" true : S1; endrewards
// Reward 5: S2
rewards "S2" true : S2; endrewards
// Reward 6: S3
rewards "S3" true : S3; endrewards
// Reward 7: S4
rewards "S4" true : S4; endrewards
// Reward 8: XX
rewards "XX" true : XX; endrewards
// Reward 9: Y
rewards "Y" true : Y; endrewards
// Reward 10: Z
rewards "Z" true : Z; endrewards
// Reward 11: P9
rewards "P9" true : P9; endrewards
// Reward 12: P8
rewards "P8" true : P8; endrewards
// Reward 13: P5
rewards "P5" true : P5; endrewards
// Reward 14: P4
rewards "P4" true : P4; endrewards
// Reward 15: P7
rewards "P7" true : P7; endrewards
// Reward 16: P6
rewards "P6" true : P6; endrewards
// Reward 17: P1
rewards "P1" true : P1; endrewards
// Reward 18: P3
rewards "P3" true : P3; endrewards
// Reward 19: P2
rewards "P2" true : P2; endrewards
// Reward 20: P10
rewards "P10" true : P10; endrewards
