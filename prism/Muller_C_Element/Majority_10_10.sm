// File generated by automatic SBML-to-PRISM conversion
// Original SBML file: /Users/lukas/Desktop/Majority_10_10.xml

ctmc

const int MAX_AMOUNT = 120;

// Compartment size
const double Cell = 1.0;

// Model parameters
const double kr_f = 0.5; // kr_f
const double kr_r = 1; // kr_r
const double ka_f = 0.0033; // ka_f
const double ka_r = 1; // ka_r
const double ko_f = 0.033; // ko_f
const double ko_r = 1; // ko_r
const double kao_f = 1; // kao_f
const double kao_r = 1; // kao_r
const double nc = 2; // nc
const double nr = 30; // nr
const double ko = 0.05; // ko
const double kb = 0.0001; // kb
const double ng = 2; // ng
const double np = 10; // np
const double ka = 0.25; // ka
const double kd = 0.00075; // kd

// Original Model did not have this module
// Species _A
const int _A_MAX = MAX_AMOUNT;
module _A

	_A : [0.._A_MAX] init 0; // Initial amount 0

endmodule

// Original Model did not have this module
// Species B
const int B_MAX = MAX_AMOUNT;
module B

	B : [0..B_MAX] init 120; // Initial amount 120

endmodule

// Species X
const int _X_MAX = MAX_AMOUNT;
module _X

	_X : [0.._X_MAX] init 70; // Initial amount 70

	// Degradation_X
	[Degradation_X] _X > 9 -> (_X'=_X-10);
	// Production_P1
	[Production_P1]  _X <= _X_MAX-10 -> (_X'=_X+10);
	// Production_P2
	[Production_P2]  _X <= _X_MAX-10 -> (_X'=_X+10);

endmodule

// Species Y
const int Y_MAX = MAX_AMOUNT;
module Y

	Y : [0..Y_MAX] init 70; // Initial amount 70

	// Degradation_Y
	[Degradation_Y] Y > 9 -> (Y'=Y-10);
	// Production_P1
	[Production_P1]  Y <= Y_MAX-10 -> (Y'=Y+10);
	// Production_P3
	[Production_P3]  Y <= Y_MAX-10 -> (Y'=Y+10);

endmodule

// Species D
const int D_MAX = MAX_AMOUNT;
module D

	D : [0..D_MAX] init 70; // Initial amount 70

	// Degradation_D
	[Degradation_D] D > 9 -> (D'=D-10);
	// Production_P4
	[Production_P4]  D <= D_MAX-10 -> (D'=D+10);
	// Production_P5
	[Production_P5]  D <= D_MAX-10 -> (D'=D+10);
	// Production_P6
	[Production_P6]  D <= D_MAX-10 -> (D'=D+10);

endmodule

// Species Z
const int Z_MAX = MAX_AMOUNT;
module Z

	Z : [0..Z_MAX] init 0; // Initial amount 0

	// Degradation_Z
	[Degradation_Z] Z > 9 -> (Z'=Z-10);
	// Production_P2
	[Production_P2]  Z <= Z_MAX-10 -> (Z'=Z+10);
	// Production_P3
	[Production_P3]  Z <= Z_MAX-10 -> (Z'=Z+10);

endmodule

// Species E
const int _E_MAX = MAX_AMOUNT;
module _E

	_E : [0.._E_MAX] init 0; // Initial amount 0

	// Degradation_E
	[Degradation_E] _E > 9 -> (_E'=_E-10);
	// Production_P7
	[Production_P7]  _E <= _E_MAX-10 -> (_E'=_E+10);

endmodule

// Species C
const int _C_MAX = MAX_AMOUNT;
module _C

	_C : [0.._C_MAX] init 70; // Initial amount 70

	// Degradation_C
	[Degradation_C] _C > 9 -> (_C'=_C-10);
	// Production_P8
	[Production_P8]  _C <= _C_MAX-10 -> (_C'=_C+10);

endmodule

// Species P8
const int P8_MAX = MAX_AMOUNT;
module P8

	P8 : [0..P8_MAX] init 2; // Initial amount 2


endmodule

// Species P1
const int P1_MAX = MAX_AMOUNT;
module P1

	P1 : [0..P1_MAX] init 2; // Initial amount 2


endmodule

// Species P2
const int P2_MAX = MAX_AMOUNT;
module P2

	P2 : [0..P2_MAX] init 2; // Initial amount 2


endmodule

// Species P3
const int P3_MAX = MAX_AMOUNT;
module P3

	P3 : [0..P3_MAX] init 2; // Initial amount 2


endmodule

// Species P4
const int P4_MAX = MAX_AMOUNT;
module P4

	P4 : [0..P4_MAX] init 2; // Initial amount 2


endmodule

// Species P5
const int P5_MAX = MAX_AMOUNT;
module P5

	P5 : [0..P5_MAX] init 2; // Initial amount 2


endmodule

// Species P6
const int P6_MAX = MAX_AMOUNT;
module P6

	P6 : [0..P6_MAX] init 2; // Initial amount 2


endmodule

// Species P7
const int P7_MAX = MAX_AMOUNT;
module P7

	P7 : [0..P7_MAX] init 2; // Initial amount 2


endmodule

// Reaction rates
module reaction_rates

	// Degradation_C: C ->
	[Degradation_C] (kd*_C) > 0 -> (kd*_C) : true;
	// Degradation_D: D ->
	[Degradation_D] (kd*D) > 0 -> (kd*D) : true;
	// Degradation_E: E ->
	[Degradation_E] (kd*_E) > 0 -> (kd*_E) : true;
	// Degradation_X: X ->
	[Degradation_X] (kd*_X) > 0 -> (kd*_X) : true;
	// Degradation_Y: Y ->
	[Degradation_Y] (kd*Y) > 0 -> (kd*Y) : true;
	// Degradation_Z: Z ->
	[Degradation_Z] (kd*Z) > 0 -> (kd*Z) : true;
	// Production_P1:  -> X+Y
	[Production_P1] (((((P1*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*_A),nc)))) > 0 -> (((((P1*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*_A),nc)))) : true;
	// Production_P2:  -> Z+X
	[Production_P2] (((((P2*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*B),nc)))) > 0 -> (((((P2*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*B),nc)))) : true;
	// Production_P3:  -> Y+Z
	[Production_P3] ((((P3*ko)*(ko_f/ko_r))*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*D),nc)))) > 0 -> ((((P3*ko)*(ko_f/ko_r))*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*D),nc)))) : true;
	// Production_P4:  -> D
	[Production_P4] (((((P4*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*_X),nc)))) > 0 -> (((((P4*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*_X),nc)))) : true;
	// Production_P5:  -> D
	[Production_P5] (((((P5*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Y),nc)))) > 0 -> (((((P5*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Y),nc)))) : true;
	// Production_P6:  -> D
	[Production_P6] ((((P6*ko)*(ko_f/ko_r))*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Z),nc)))) > 0 -> ((((P6*ko)*(ko_f/ko_r))*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*Z),nc)))) : true;
	// Production_P7:  -> E
	[Production_P7] (((((P7*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*D),nc)))) > 0 -> (((((P7*ko)*ko_f)/ko_r)*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*D),nc)))) : true;
	// Production_P8:  -> C
	[Production_P8] ((((P8*ko)*(ko_f/ko_r))*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*_E),nc)))) > 0 -> ((((P8*ko)*(ko_f/ko_r))*nr)/((1+((ko_f/ko_r)*nr))+(func(pow,((kr_f/kr_r)*_E),nc)))) : true;

endmodule

// Reward structures (one per species)

// Reward 2: X
rewards "_X" true : _X; endrewards
// Reward 3: Y
rewards "Y" true : Y; endrewards
// Reward 4: D
rewards "D" true : D; endrewards
// Reward 6: Z
rewards "Z" true : Z; endrewards
// Reward 7: E
rewards "_E" true : _E; endrewards
// Reward 8: C
rewards "_C" true : _C; endrewards
// Reward 9: P8
rewards "P8" true : P8; endrewards
// Reward 10: P1
rewards "P1" true : P1; endrewards
// Reward 11: P2
rewards "P2" true : P2; endrewards
// Reward 12: P3
rewards "P3" true : P3; endrewards
// Reward 13: P4
rewards "P4" true : P4; endrewards
// Reward 14: P5
rewards "P5" true : P5; endrewards
// Reward 15: P6
rewards "P6" true : P6; endrewards
// Reward 16: P7
rewards "P7" true : P7; endrewards
