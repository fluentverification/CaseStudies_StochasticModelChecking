#lang ivy1.6

#type num
#interpret num -> bv[10]

object chem = {
    	type num
        interpret num -> bv[10]

        individual rl : num
	individual g : num
	individual ga : num
	individual gbg : num
	
	action incr(x:chem.num) returns(y:chem.num) = {
		y := x + 1
	}

	action decr(x:chem.num) returns(y:chem.num) = {
		y := x - 1
        }

        implement fifth.r5(rl_1:chem.num, g_1:chem.num, ga_1:chem.num, gbg_1:chem.num) {
		assert rl_1 = rl & g_1 = g & ga_1 = ga & gbg_1 = gbg;
		#call others.r5(rl,g,ga,gbg);
		rl := chem.decr(rl);
		g := chem.decr(g);
		ga := chem.incr(ga);
		gbg := chem.incr(gbg);
		if gbg >= 50 {
			call goal.achieved(gbg)
	        }
	        }
    
}

module fifth_reaction(t) = {
#	individual rl : chem.num
#	individual g : chem.num
#	individual ga : chem.num
#	individual gbg : chem.num
	
	export action r5(rl_1:chem.num, g_1:chem.num, ga_1:chem.num, gbg_1:chem.num)
	import action r3(r_1:chem.num, l_1:chem.num, rl_1:chem.num)
	import action r4(rl_1:chem.num, r_1:chem.num)
	import action r6(ga_1:chem.num, gd_1:chem.num)
	import action r7(gbg_1:chem.num,gd_1:chem.num, g_1:chem.num)
	import action r8(rl_1:chem.num)

	object spec = {
		individual rl : chem.num
		individual g : chem.num
		individual ga : chem.num
		individual gbg : chem.num	
		after init {
			rl := 0;
			g := 50;
			ga := 0;
			gbg := 0
		}
		
		# before r5(rl_1:chem.num, g_1:chem.num,
	# ga_1:chem.num, gbg_1:chem.num) {
	        before r5 {
			assert rl_1 = rl & g_1 = g & ga_1 = ga & gbg_1 = gbg;
		        assert rl >= 1 & g >= 1;
			rl := chem.decr(rl);
			g := chem.decr(g);
			ga := chem.incr(ga);
			gbg := chem.incr(gbg)			
		}
		
		before r3 {
			assert r_1 >= 1 & l_1 >= 1;
			rl := chem.incr(rl)
		}

		before r4 {
			assert rl >= 1;
			rl := chem.decr(rl)
		}

		before r6 {
			assert ga >= 1;
			ga := chem.decr(ga);
		}

		before r7 {
			assert gbg >= 1 & gd_1 >= 1;
			gbg := chem.decr(gbg);
			g := chem.incr(g)
		}

		before r8 {
			assert true;
			rl := chem.incr(rl)
	        }

	        # implement r5 {
		# assert rl_1 = rl & g_1 = g & ga_1 = ga & gbg_1 = gbg;
		# call others.r5(rl,g,ga,gbg);
		# rl := chem.decr(rl);
		# g := chem.decr(g);
		# ga := chem.incr(ga);
		# gbg := chem.incr(gbg);
		# if gbg >= 50 {
		# 	call goal.achieved(gbg)
	        # }
	        # }
        }

}
instance fifth : fifth_reaction(chem.num)

module other_reactions(t) = {

	import action r5(rl_1:chem.num,g_1:chem.num,ga_1:chem.num,gbg_1:chem.num)
	export action r1(r_1:chem.num)
	export action r2(r_1:chem.num)
	export action r3(r_1:chem.num, l_1:chem.num, rl_1:chem.num)
	export action r4(rl_1:chem.num, r_1:chem.num)
	export action r6(ga_1:chem.num, gd_1:chem.num)
	export action r7(gbg_1:chem.num,gd_1:chem.num,g_1:chem.num)
	export action r8(rl_1:chem.num)

	object spec = {
		individual r : chem.num
		individual l : chem.num
		individual rl : chem.num
		individual g : chem.num
		individual ga : chem.num
		individual gbg : chem.num
		individual gd : chem.num	
		after init {
			r := 50;
			l := 2;
			rl := 0;
			g := 50;
			ga := 0;
			gbg := 0;
			gd := 0
		}
	
		before r5 {
			#assert rl_1 = rl & g_1 = g & ga_1 = ga & gbg_1 = gbg;
			assert rl >= 1 & g >= 1;
			rl := chem.decr(rl);
			g := chem.decr(g);
			ga := chem.incr(ga);
			gbg := chem.incr(gbg);
#			if gbg >= 1 {
#				call goal.achieved(gbg)
#			}
		}
		
		before r1 {
			#assert false;
			assert r_1 = r;
			r := chem.incr(r)
		}

		before r2 {
			#assert false;
			assert r_1 = r;
			assert r >= 1;
			r := chem.decr(r)
		}

		before r3 {
			#assert false;
			assert r_1 = r & l_1 = l & rl_1 = rl;
			assert r >= 1 & l >= 1;
			r := chem.decr(r);
			rl := chem.incr(rl)
		}

		before r4(rl_1:chem.num, r_1:chem.num) {
			#assert false;i
			assert rl_1 = rl & r_1 = r;
			assert rl >= 1;
			rl := chem.decr(rl);
			r := chem.incr(r)
		}
		before r6(ga_1:chem.num, gd_1:chem.num) {
			#assert false;
			assert ga_1 = ga & gd_1 = gd;
			assert ga >= 1;
			ga := chem.decr(ga);
			gd := chem.incr(gd)
		}

		before r7(gbg_1:chem.num, gd_1:chem.num, g_1:chem.num) {
			#assert false;
			assert gbg_1 = gbg & g_1 = g & gd_1 = gd;
			assert gbg >= 1 & gd >= 1;
			gbg := chem.decr(gbg);
			gd := chem.decr(gd);
			g := chem.incr(g)
		}

		before r8(rl_1:chem.num) {
			assert rl_1 = rl;
			assert true;
			rl := chem.incr(rl)
		}		
	}	
}
instance others : other_reactions(chem.num)


object goal = {

	action achieved(v:chem.num)

	object spec = {
		before achieved {
			assert v >= 5 
		}
	}
}


object proto = {
	individual r : chem.num
	individual l : chem.num
	individual rl : chem.num
	individual g : chem.num
	individual ga : chem.num
	individual gbg : chem.num
	individual gd : chem.num

	after init {
		r := 50;
		l := 2;
		rl := 0;
		g := 50;
		ga := 0;
		gbg := 0;
		gd := 0
	}

	# implement fifth.r5 {
	# 	assert rl_1 = rl & g_1 = g & ga_1 = ga & gbg_1 = gbg;
	# 	call others.r5(rl,g,ga,gbg);
	# 	rl := chem.decr(rl);
	# 	g := chem.decr(g);
	# 	ga := chem.incr(ga);
	# 	gbg := chem.incr(gbg);
	# 	if gbg >= 50 {
	# 		call goal.achieved(gbg)
	# 	}
	# }

	implement others.r1 {
		assert r_1 = r;
		r := chem.incr(r)
	}
	
	implement others.r2 {
		assert r_1 = r;
		assert r >= 1;
		r := chem.decr(r)
	}

	implement others.r3 {
		assert r_1 = r & l_1 = l & rl_1 = rl;
		assert r >= 1 & l >= 1;
		#call fifth.r3(r,l,rl);
		r := chem.decr(r);
		l := chem.decr(l);
		rl := chem.incr(rl);
		l := chem.incr(l)
	}

	implement others.r4 {
		assert rl_1 = rl & r_1 = r;
		assert rl >= 1;
		call fifth.r4(rl,r);
		rl := chem.decr(rl);
		r := chem.incr(r)
	}

	implement others.r6 {
		assert ga >= 1;
		assert ga_1 = ga & gd_1 = gd;
		call fifth.r6(ga,gd);
		ga := chem.decr(ga);
		gd := chem.incr(gd)
	}

	implement others.r7 {
		assert gbg >= 1 & gd >= 1;
		assert gbg_1 = gbg & gd_1 = gd & g_1 = g;
		call fifth.r7(gbg,gd,g);
		gbg := chem.decr(gbg);
		gd := chem.decr(gd);
		g := chem.incr(g)
	}

	implement others.r8 {
		assert rl_1 = rl;
		call fifth.r8(rl);
		rl := chem.incr(rl)
	}	
}

import goal.achieved

isolate iso_fifth = fifth with chem
# isolate iso_fifth = fifth with chem, proto
# isolate iso_others = others with chem, goal, proto
# isolate iso_proto = proto with fifth, others, chem, goal
