// File generated by SBML-to-PRISM converter
// Original file: Toggle_Switch_RBA.xml
// @GeneticLogicLab

ctmc

// Compartment size
const double Cell = 1.0;

// Model parameters
const double kd = 0.0075; // Degradation rate
const double kc_f = 0.05; // Forward complex formation rate
const double kc_r = 1.0; // Reverse complex formation rate
const double nc = 2.0; // Stoichiometry of binding
const double kr_f = 0.5; // Forward repression binding rate
const double kr_r = 1.0; // Reverse repression binding rate
const double ka_f = 0.0033; // Forward activation binding rate
const double ka_r = 1.0; // Reverse activation binding rate
const double ko_f = 0.033; // Forward RNAP binding rate
const double ko_r = 1.0; // Reverse RNAP binding rate
const double kao_f = 1.0; // Forward activated RNAP binding rate
const double kao_r = 1.0; // Reverse activated RNAP binding rate
const double nr = 30.0; // Initial RNAP count
const double ko = 0.05; // Open complex production rate
const double kb = 1.0E-4; // Basal production rate
const double ng = 2.0; // Initial promoter count
const double np = 10.0; // Stoichiometry of production
const double ka = 0.25; // Activated production rate

// Species P1
module P1

  P1  :  int init 2;


endmodule

// Species IPTG
module IPTG

  IPTG  :  int init 0;

		// Complex_C1
		[Complex_C1] IPTG > 0 -> (IPTG' = IPTG - 1);

endmodule

// Species aTc
module aTc

  aTc  :  int init 0;

		// Complex_C2
		[Complex_C2] aTc > 0 -> (aTc' = aTc - 1);

endmodule

// Species TetR
module TetR

  TetR  :  int init 0;

		// Degradation_TetR
		[Degradation_TetR] TetR > 0 -> (TetR' = TetR - 1);
		// Complex_C2
		[Complex_C2] TetR > 0 -> (TetR' = TetR - 1);
		// Production_P1
		[Production_P1] TetR > 0 -> (TetR' = TetR + 10);

endmodule

// Species GFP
module GFP

  GFP  :  int init 0;

		// Degradation_GFP
		[Degradation_GFP] GFP > 0 -> (GFP' = GFP - 1);
		// Production_P1
		[Production_P1] GFP > 0 -> (GFP' = GFP + 10);

endmodule

// Species P2
module P2

  P2  :  int init 2;


endmodule

// Species C1
module C1

  C1  :  int init 0;

		// Degradation_C1
		[Degradation_C1] C1 > 0 -> (C1' = C1 - 1);
		// Complex_C1
		[Complex_C1] C1 > 0 -> (C1' = C1 + 1);

endmodule

// Species C2
module C2

  C2  :  int init 0;

		// Degradation_C2
		[Degradation_C2] C2 > 0 -> (C2' = C2 - 1);
		// Complex_C2
		[Complex_C2] C2 > 0 -> (C2' = C2 + 1);

endmodule

// Species LacI
module LacI

  LacI  :  int init 0;

		// Degradation_LacI
		[Degradation_LacI] LacI > 0 -> (LacI' = LacI - 1);
		// Complex_C1
		[Complex_C1] LacI > 0 -> (LacI' = LacI - 1);
		// Production_P2
		[Production_P2] LacI > 0 -> (LacI' = LacI + 10);

endmodule

// Reaction rates
module reaction_rates

		// Degradation_TetR:  ->  TetR -> 
		[Degradation_TetR] (kd * TetR) > 0 -> (kd * TetR) : true;

		// Degradation_GFP:  ->  GFP -> 
		[Degradation_GFP] (kd * GFP) > 0 -> (kd * GFP) : true;

		// Degradation_C2:  ->  C2 -> 
		[Degradation_C2] (kd * C2) > 0 -> (kd * C2) : true;

		// Degradation_LacI:  ->  LacI -> 
		[Degradation_LacI] (kd * LacI) > 0 -> (kd * LacI) : true;

		// Degradation_C1:  ->  C1 -> 
		[Degradation_C1] (kd * C1) > 0 -> (kd * C1) : true;

		// Complex_C1:  ->  IPTG + LacI -> C1
		[Complex_C1] (((kc_f * pow(IPTG , nc_IPTG)) * pow(LacI , nc_LacI)) - (kc_r * C1)) > 0 -> (((kc_f * pow(IPTG , nc_IPTG)) * pow(LacI , nc_LacI)) - (kc_r * C1)) : true;

		// Complex_C2:  ->  aTc + TetR -> C2
		[Complex_C2] (((kc_f * pow(aTc , nc_aTc)) * pow(TetR , nc_TetR)) - (kc_r * C2)) > 0 -> (((kc_f * pow(aTc , nc_aTc)) * pow(TetR , nc_TetR)) - (kc_r * C2)) : true;

		// Production_P1:  ->   -> 
GFP + 
TetR
		[Production_P1] (((((P1 * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * LacI) , nc))) > 0 -> (((((P1 * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * LacI) , nc))) : true;

		// Production_P2:  ->   -> 
LacI
		[Production_P2] (((((P2 * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * TetR) , nc))) > 0 -> (((((P2 * ko) * ko_f) / ko_r) * nr) / ((1 + ((ko_f / ko_r) * nr)) + pow(((kr_f / kr_r) * TetR) , nc))) : true;

endmodule

// Reward structures (one per species)
// Reward 1: P1
rewards "P1" true : P1; endrewards
// Reward 2: IPTG
rewards "IPTG" true : IPTG; endrewards
// Reward 3: aTc
rewards "aTc" true : aTc; endrewards
// Reward 4: TetR
rewards "TetR" true : TetR; endrewards
// Reward 5: GFP
rewards "GFP" true : GFP; endrewards
// Reward 6: P2
rewards "P2" true : P2; endrewards
// Reward 7: C1
rewards "C1" true : C1; endrewards
// Reward 8: C2
rewards "C2" true : C2; endrewards
// Reward 9: LacI
rewards "LacI" true : LacI; endrewards
